; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html


; openocd -l openocd_log.txt -f board/esp32-wrover-kit-3.3v.cfg -c "init; reset halt; flash erase_address 0x1000 61440; exit"
[platformio]
default_envs = esp32C3-V02

[env]
platform = espressif32
framework = arduino
upload_protocol = esp-builtin
; upload_protocol = esptool
debug_tool = esp-builtin
debug_init_break =							#do not break at program start
monitor_speed = 115200
lib_deps = 
	olikraus/U8g2@^2.35.19
	igorantolic/Ai Esp32 Rotary Encoder@^1.7
platform_packages =	
	framework-arduinoespressif32@https://github.com/espressif/arduino-esp32.git#2.0.7

[hardware_V01]								#hardware version 01
; board = esp32-c3-devkitc-02
board = lolin_c3_mini
build_flags = 
	-D SDA_PIN=3							#the IO pin for the i2c OLED controller SDA pin
	-D SCL_PIN=4							#the IO pin for the i2c OLED controller SCL pin

	-D LED_GPIO=8							#the output pin for the (onboard) LED signal
	-D LED_ACTIVE=0							#the level that is considered active
	-D NO_RGB								#define for boards that have no RGB led or use the RGB pin as common output

	-D INJECTION_GPIO=7						#the output  pin for the injection signal
	-D INJECTION_ACTIVE=1					#the level that is considered active

	-D RELAY_GPIO=8							#the output  pin for the relay signal, shared with led pin!!!!
	-D RELAY_ACTIVE=1						#the level that is considered active

	-D ROTARY_SW_GPIO=2						#the input pin for the rotary encoder button
	-D ROTARY_A_GPIO=1						#the input pin for the rotary encoder A signal
	-D ROTARY_B_GPIO=0						#the input pin for the rotary encoder B signal
	-D ROTARY_ACTIVE=0						#the level that is considered active
	-D ROTARY_STEPS=4						#for most rotary encoders there are 4 levels per tic (quadrature encoder)
	-D ROTARY_VCC_P=-1						#set it to the IO pin that should deliver the rotary VCC in stead of processor VCC

	-D MIST_GPIO=10							#the input pin for the external mist enable pin
	-D MIST_ACTIVE=0						#the level that is considered active

	-D COOLANT_GPIO=10						#the input pin for the external coolant enable pin, is not availeble on HW V01
	-D COOLANT_ACTIVE=0						#the level that is considered active

[hardware_V02]								#hardware version 02
board = esp32-c3-devkitc-02
build_flags = 
	-D SDA_PIN=3							#the IO pin for the i2c OLED controller SDA pin
	-D SCL_PIN=4							#the IO pin for the i2c OLED controller SCL pin

	-D LED_GPIO=8							#the output pin for the (onboard) LED signal
	-D LED_ACTIVE=0							#the level that is considered active
	-D NO_RGB								#define for boards that have no RGB led or use the RGB pin as common output

	-D INJECTION_GPIO=10					#the output pin for the injection signal
	-D INJECTION_ACTIVE=1					#the level that is considered active

	-D RELAY_GPIO=5							#the output pin for the injection signal
	-D RELAY_ACTIVE=1						#the level that is considered active

	-D ROTARY_SW_GPIO=2						#the input pin for the rotary encoder button
	-D ROTARY_A_GPIO=1						#the input pin for the rotary encoder A signal
	-D ROTARY_B_GPIO=0						#the input pin for the rotary encoder B signal
	-D ROTARY_ACTIVE=0						#the level that is considered active
	-D ROTARY_STEPS=4						#for most rotary encoders there are 4 levels per tic (quadrature encoder)
	-D ROTARY_VCC_P=-1						#set it to the IO pin that should deliver the rotary VCC in stead of processor VCC

	-D MIST_GPIO=6							#the input pin for the external mist enable pin
	-D MIST_ACTIVE=0						#the level that is considered active

	-D COOLANT_GPIO=7						#the input pin for the external mist enable pin
	-D COOLANT_ACTIVE=0						#the level that is considered active

[default_rotary_settings]
build_flags = 
	-D ROTARY_ACCELERATION=1000				#the higher this value, the larger the steps/tic when turning the knob fast
	-D ROTARY_DEBOUNCE_TIME=100				#the minumum duration of the button pin signal to stable (debounce)

[default_debounce_settings]
build_flags =
	-D MIST_DEBOUNCE_TIME=1000				#the minimum duration of the mist pin signal to be stable (debounce)
	-D COOLANT_DEBOUNCE_TIME=1000				#the minimum duration of the mist pin signal to be stable (debounce)

[default_injection_settings]
build_flags = 
	-D INJECTIONFREQUENCY=5					#the frequency of the injection pulse
	-D MIN_INJECTION_TIME=6	    			#the minium injection time tics that can be set, typiccaly 0.8 ms for an 12V injection valve
	-D MAX_INJECTION_TIME=1000				#the maximum injection time tics that can be set

[env:esp32C3-V01]
board =${hardware_V01.board}
upload_protocol = esptool
build_flags = 
	${hardware_V01.build_flags}
	${default_rotary_settings.build_flags}
	${default_debounce_settings.build_flags}
	${default_injection_settings.build_flags}
	-D INJECTION_MODE

[env:esp32C3-V02]
board =${hardware_V02.board}
build_flags = 
	${hardware_V02.build_flags}
	${default_rotary_settings.build_flags}
	${default_debounce_settings.build_flags}
	${default_injection_settings.build_flags}
	; -D RELAY					#enable relay for mist output
	; -D DEBUG	

[env:esp32C3-V02-Injection-Only]
board =${hardware_V02.board}
build_flags = 
	${hardware_V02.build_flags}
	${default_rotary_settings.build_flags}
	${default_debounce_settings.build_flags}
	${default_injection_settings.build_flags}
	-D INJECTION_MODE
	; -D RELAY					#enable relay for mist output
	; -D DEBUG	

[env:esp32C3-V02-SerialUpload]
; Failed to get flash mappings (-4)
; If above error, than use this environment once for uploading
upload_protocol = esptool
board =${hardware_V02.board}
build_flags = 
	${hardware_V02.build_flags}
	${default_rotary_settings.build_flags}
	${default_debounce_settings.build_flags}
	${default_injection_settings.build_flags}
	-D INJECTION_MODE
	; -D RELAY					#enable relay for mist output
	; -D DEBUG	
